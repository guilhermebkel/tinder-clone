{"version":3,"sources":["assets/logo.svg","assets/like.svg","assets/dislike.svg","services/Api.js","pages/Login.js","pages/Main.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Api","axios","create","baseURL","Login","_ref","history","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_handleSubmit","asyncToGenerator","regenerator_default","a","mark","_callee","event","response","_id","wrap","_context","prev","next","preventDefault","post","user","sent","console","log","data","push","concat","stop","apply","this","arguments","react_default","createElement","className","onSubmit","_x","src","TinderLogo","alt","placeholder","value","onChange","target","type","Main","match","users","setUsers","_handleLike","_callee2","id","_context2","headers","params","alert","_handleDislike","_callee3","_context3","filter","useEffect","_loadUsers","get","loadUsers","react_router_dom","to","length","map","key","avatar","name","bio","onClick","_x2","handleDislike","DislikeIcon","handleLike","LikeIcon","Routes","react_router","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c68e0858.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6a01ceef.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.542059a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/dislike.d4ec34e8.svg\";","import axios from 'axios'\n\nconst Api = axios.create({\n    baseURL: process.env.NODE_ENV === 'production' \n    ? 'https://fake-tinder-app.herokuapp.com' \n    : 'http://localhost:3333'\n})\n\nexport default Api","import React, { useState } from 'react'\nimport Api from '../services/Api'\n\nimport './Login.css'\n\nimport TinderLogo from './../assets/logo.svg'\n\nexport default function Login({ history }){\n\n    const [ username, setUsername ] = useState('')\n\n    async function handleSubmit(event){\n        event.preventDefault()\n\n        const response = await Api.post('/users', {\n            user: username,\n        })\n\n        console.log(response)\n        const { _id } = response.data.user\n        history.push(`/Fake-Tinder/user/${_id}`)\n    }\n\n    return (\n        <div className=\"login-container\">\n        <form onSubmit={handleSubmit}>\n            <img src={TinderLogo} alt=\"Tinder Logo\" />\n            <input \n                placeholder=\"Type your github username...\" \n                value={username}\n                onChange={event => setUsername(event.target.value)}\n            />\n            <button type=\"submit\">Log in</button>\n        </form> \n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport Api from '../services/Api'\n\nimport TinderLogo from '../assets/logo.svg'\nimport LikeIcon from '../assets/like.svg'\nimport DislikeIcon from '../assets/dislike.svg'\n\nimport './Main.css'\n\nexport default function Main({ match }){\n\n    const [users, setUsers] = useState([])\n\n    useEffect(() => {\n        async function loadUsers(){\n            const response = await Api.get('/users', {\n                headers: { \n                    user: match.params.id\n                }\n            })\n            \n            setUsers(response.data.users)\n        }\n        loadUsers()\n    }, [match.params.id])\n\n    async function handleLike(id){\n        const response = await Api.post(`/users/${id}/likes`, null, {\n            headers: {\n                user: match.params.id\n            }\n        })\n\n        if(response.data.user.match) alert(\"Match!\")\n    }\n\n    async function handleDislike(id){\n        await Api.post(`/users/${id}/dislikes`, null, {\n            headers: {\n                user: match.params.id\n            }\n        })\n\n        setUsers(users.filter(user => user._id !== id))\n    }\n\n    return (\n        <div className=\"main-container\">\n            <Link to=\"/Fake-Tinder/\">\n                <img src={TinderLogo} alt=\"Tinder Logo\" />\n            </Link>\n                { users.length ? (\n                    <ul>\n                        {users.map(user => (\n                            <li key={user._id}>\n                                <img src={user.avatar} alt=\"\" />\n                                <footer>\n                                    <strong>{user.name}</strong>\n                                    <p>{user.bio}</p>\n                                </footer>\n                                <div className=\"buttons\">\n                                    <button type=\"button\" onClick={() => handleDislike(user._id)}>\n                                        <img src={DislikeIcon} alt=\"Dislike\"/>\n                                    </button>\n                                    <button type=\"button\" onClick={() => handleLike(user._id)}>\n                                        <img src={LikeIcon} alt=\"Dislike\"/>\n                                    </button>\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                ) : (\n                    <div className=\"empty\">Acabou :(</div>\n                )}\n        </div>\n    )\n}","import React from 'react'\nimport { BrowserRouter, Route } from 'react-router-dom'\n\nimport Login from './pages/Login'\nimport Main from './pages/Main'\n\nexport default function Routes(){\n    return(\n        <BrowserRouter>\n            <Route path=\"/Fake-Tinder/\" exact component={Login} />\n            <Route path=\"/Fake-Tinder/user/:id\" component={Main} />\n        </BrowserRouter>\n    )\n}","import React from 'react';\n\nimport './App.css'\n\nimport Routes from './Routes'\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Route exact path='' component={App} />\n    </BrowserRouter>\n, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}